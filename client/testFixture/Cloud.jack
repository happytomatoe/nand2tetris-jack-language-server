class Cloud {
  field int x,y;
  field boolean visible;
  constructor  Cloud new(int y_) {
   let x=-1;
   let y=y_;
   return this;
 }

 method void dispose() {
  do Memory.deAlloc(this);
  return;
}

method boolean isVisible(){
    return visible;
}

method void setVisible(boolean visible_){
    let visible=visible_;
    return;
}


method int getX(){
    return x;
}
function int getW(){
    return 46;
}
method void setX(int x_){
    let x=x_;
    return;
}
method void update(){

    do hide();
    //TODO: what's the clean  way to stop updating/hide/remove cactus?
    if(x>1){
        let x=x-1;
        do show();
    }

    return;
}
method void hide() {
    do Screen.setColor(false);
    do draw();
    let visible=false;
    return;
}

method void show() {
    do Screen.setColor(true);
    do draw();
    let visible=true;
    return;
}


method void draw() {

    if(~ScreenCustom.visible(x,y,Cactus.getW(),Cactus.getH())){
        do Sys.error(ErrorCodes.cannotDrawCloudOfScreen());
    }
    do Screen.drawLine(x+25,y,x+28,y);
    do Screen.drawLine(x+20,y+1,x+25,y+1);
    do Screen.drawLine(x+28,y+1,x+30,y+1);
    do Screen.drawLine(x+19,y+2,x+20,y+2);
    do Screen.drawLine(x+30,y+2,x+31,y+2);
    do Screen.drawLine(x+17,y+3,x+19,y+3);
    do Screen.drawLine(x+31,y+3,x+31,y+5);
    do Screen.drawLine(x+17,y+4,x+17,y+6);
    do Screen.drawLine(x+32,y+4,x+34,y+4);
    do Screen.drawLine(x+34,y+5,x+39,y+5);
    do Screen.drawLine(x+14,y+6,x+16,y+6);
    do Screen.drawLine(x+39,y+6,x+39,y+7);
    do Screen.drawLine(x+13,y+7,x+14,y+7);
    do Screen.drawLine(x+40,y+7,x+42,y+7);
    do Screen.drawLine(x+6,y+8,x+13,y+8);
    do Screen.drawLine(x+42,y+8,x+42,y+9);
    do Screen.drawLine(x+5,y+9,x+6,y+9);
    do Screen.drawLine(x+43,y+9,x+44,y+9);
    do Screen.drawLine(x+5,y+10,x+5,y+11);
    do Screen.drawPixel(x+44,y+10);
    do Screen.drawLine(x+1,y+11,x+2,y+11);
    do Screen.drawPixel(x+4,y+11);
    do Screen.drawLine(x+45,y+11,x+45,y+12);
    do Screen.drawLine(x,y+12,x+1,y+12);
    do Screen.drawLine(x+10,y+12,x+44,y+12);
    
   return;
}
    


}
