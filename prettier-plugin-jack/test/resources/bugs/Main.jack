class Main {
static Main instance;
field Dino dino;
field Array cactusPool, cloudsPool;
field Pebbles pebbles;
field boolean exit, waitForStart, dead;
field int timestep, dinoY, cactusPoolSize, cloudsPoolSize, nextCactusX, cactusCounter, nextCloudX;
static String startMessage;

constructor Main new() {
var int i, qSize;
let cactusPoolSize = 10;
let cloudsPoolSize = 10;

let startMessage = "Press Up to start";
let waitForStart = true;

let timestep = 30;
let dinoY = 150;
let dead = true;
let exit = false;

let cactusPool = Array.new(cactusPoolSize);

let i = 0;
while (i < cactusPoolSize) {
let cactusPool[i] = Cactus.new(-1, dinoY - 3);
let i = i + 1;
}

let cloudsPool = Array.new(cloudsPoolSize);

let i = 0;
while (i < cloudsPoolSize) {
let cloudsPool[i] = Cloud.new(10);
let i = i + 1;
}

return this;
}

function void main() {
var Main game;
let game = Main.new();
do game.run();
return;
}


method void run() {
var int dinoH, i, cactusEndY, sceneX;
var int obstaclesSpeed;
let dino = Dino.new(50, dinoY, -13, 1);
let dinoH = dino.getH();
let pebbles = Pebbles.new(0, dinoY + dinoH - 1, obstaclesSpeed);

do Output.moveCursor(11, 23);
do Output.printString(startMessage);
while (~exit) {
if ((~(waitForStart)) | Keys.upPressed()) {
do Screen.clearScreen();
let dead = false;
let obstaclesSpeed = 5;
let sceneX = 0;
let cactusCounter = 0;
do hideCactuses();
do hideClouds();

let nextCactusX = 500;
let nextCloudX = 500;
// do Output.moveCursor(0,0);
}
while (~dead) {
if (MathCustom.mod(sceneX, 1000) = 0) {
	let obstaclesSpeed = obstaclesSpeed + 2;
	do pebbles.setSpeed(obstaclesSpeed);
}

do addVisibleCactuses(obstaclesSpeed, sceneX);
do updateCactuses();

do addVisibleClouds(obstaclesSpeed, sceneX);
do updateClouds();

do Main.drawTrail(180);
do pebbles.update();
do dino.update();
let dead = dinoColided();
if (dead) {
	do dino.die();
	do Output.moveCursor(11, 23);
	do Output.printString(startMessage);
}

let sceneX = sceneX + obstaclesSpeed;
if (sceneX > 29999) {
	let sceneX = sceneX - 30000;
}
do Sys.wait(timestep);
}
do Sys.wait(timestep);
}
return;
}
method boolean dinoColided() {
var Cactus cactus;
var int i;
let i = 0;
while (i < cactusPoolSize) {
let cactus = cactusPool[i];
if (cactus.isVisible() & CollisionDetector.colided(dino, cactus)) {
return true;
}
let i = i + 1;
}

return false;
}
method void hideCactuses() {
var Cactus cactus;
var int i;
let i = 0;
while (i < cactusPoolSize) {
let cactus = cactusPool[i];
do cactus.setVisible(false);
let i = i + 1;
}
return;
}
method void hideClouds() {
var Cloud c;
var int i;
let i = 0;
while (i < cloudsPoolSize) {
let c = cloudsPool[i];
do c.setVisible(false);
let i = i + 1;
}
return;
}

method void updateCactuses() {
var Cactus cactus;
var int i;
let i = 0;
while (i < cactusPoolSize) {
let cactus = cactusPool[i];
if (cactus.isVisible()) {
do cactus.update();
}
let i = i + 1;
}
return;
}

method void updateClouds() {
var Cloud c;
var int i;
let i = 0;
while (i < cloudsPoolSize) {
let c = cloudsPool[i];
if (c.isVisible()) {
do c.update();
}
let i = i + 1;
}
return;
}
method void addVisibleCactuses(int obstaclesSpeed, int sceneX) {
var Cactus cactus;
var int i, t;

while (ScreenCustom.visible(nextCactusX - sceneX, 0, Cactus.getW(), 0)) {
let cactus = getAvailableCactus();
if (cactus = null) {
do Sys.error(ErrorCodes.cantFindAvailableCactus());
}

do cactus.setX(511 - Cactus.getW());
do cactus.setSpeed(obstaclesSpeed);
do cactus.setVisible(true);

let t = MathCustom.mod(cactusCounter, 9);
// do Output.printInt(t);
// 0 1 2 3 4 5 6 7 8
// 1 2   1 2   3
if ((t = 1) | (t = 4) | ((t > 5) & (t < 8))) {
let nextCactusX = nextCactusX + Cactus.getW() + 5;
}else{
let nextCactusX = nextCactusX + 400;
}

let cactusCounter = cactusCounter + 1;
if (cactusCounter > 29999) {
let cactusCounter = 0;
}

}
return;
}
method Cactus getAvailableCactus() {
var Cactus cactus;
var int i;
let i = 0;
while (i < cactusPoolSize) {
let cactus = cactusPool[i];
if (~cactus.isVisible()) {
return cactus;
}
let i = i + 1;
}
return null;
}

method void addVisibleClouds(int obstaclesSpeed, int sceneX) {
var Cloud c;

while (ScreenCustom.visible(nextCloudX - sceneX, 0, Cloud.getW(), 0)) {
let c = getAvailableCloud();
if (c = null) {
do Sys.error(ErrorCodes.cantFindAvailableCloud());
}
do c.setX(511 - Cloud.getW());
do c.setVisible(true);
let nextCloudX = nextCloudX + 2000;
}
return;
}
method Cloud getAvailableCloud() {
var Cloud c;
var int i;
let i = 0;
while (i < cloudsPoolSize) {
let c = cloudsPool[i];
if (~c.isVisible()) {
return c;
}
let i = i + 1;
}
return null;
}
function void drawTrail(int y) {
do Screen.drawLine(0, y, 512, y);
return;
}

}